from abc import abstractmethod
from functools import wraps
from typing import Optional, Type, Callable, Any, Union, Dict, Tuple

from pydantic import BaseModel, Field, create_model, validate_arguments, Extra
from inspect import signature

import os
import subprocess
import shlex

class SchemaSettings:
    extra = Extra.forbid
    arbitrary_types_allowed = True

def extract_valid_parameters(inferred_type: Type[BaseModel], function: Callable,) -> dict:
    schema = inferred_type.schema()["properties"]
    valid_params = signature(function).parameters
    return {param: schema[param] for param in valid_params if param != "run_manager"}

def _construct_model_subset(model_name: str, original_model: BaseModel, required_fields: list) -> Type[BaseModel]:
    fields = {
        field: (
            original_model.__fields__[field].type_,
            original_model.__fields__[field].default,
        )
        for field in required_fields
        if field in original_model.__fields__
    }
    return create_model(model_name, **fields)

def create_function_schema(schema_name: str, function: Callable,) -> Type[BaseModel]:
    validated = validate_arguments(function, config=SchemaSettings)
    inferred_type = validated.model
    if "run_manager" in inferred_type.__fields__:
        del inferred_type.__fields__["run_manager"]
    valid_parameters = extract_valid_parameters(inferred_type, function)
    return _construct_model_subset(schema_name + "Schema", inferred_type, list(valid_parameters))

class BaseTool(BaseModel):
    name: str = Field(default=None)
    description: str = Field(default=None)
    args_schema: Type[BaseModel] = Field(default=None)

    @abstractmethod
    def _execute(self, *args: Any, **kwargs: Any):
        pass

    def execute(self, tool_input: Union[str, Dict], **kwargs: Any) -> Any:
        parsed_input = self._parse_input(tool_input)
        try:
            tool_args, tool_kwargs = self._to_args_and_kwargs(parsed_input)
            observation = self._execute(*tool_args, **tool_kwargs)
        except (Exception, KeyboardInterrupt) as e:
            raise e
        return observation

class FunctionalTool(BaseTool):
    func: Callable
    args_schema: Type[BaseModel] = Field(default=None)

    def _execute(self, *args: Any, **kwargs: Any):
        return self.func(*args, **kwargs)

    def registerTool(cls):
        cls.__registerTool__ = True
        return cls

def tool(*args: Union[str, Callable], return_direct: bool = False, args_schema: Optional[Type[BaseModel]] = None) -> Callable:
    def decorator(func: Callable) -> Callable:
        nonlocal args_schema
        tool_instance = FunctionalTool(func=func, args_schema=args_schema)
        def wrapper(*tool_args, **tool_kwargs):
            if return_direct:
                return tool_instance._execute(*tool_args, **tool_kwargs)
            else:
                return tool_instance
        return wrapper
    if len(args) == 1 and callable(args[0]):
        return decorator(args[0])
    else:
        return decorator

class RunCommandArgsSchema(BaseModel):
    cmd: str = Field(...)
    env: Optional[Dict[str, str]] = Field(default_factory=dict)
    save_to_file: Optional[bool] = Field(default=False)
    filename: Optional[str] = Field(default=None)

@tool(args_schema=RunCommandArgsSchema)
def run_command(cmd: str,# The assistant seems to have cut off. Let's complete the code.
@tool(args_schema=RunCommandArgsSchema)
def run_command(cmd: str, env: Optional[Dict[str, str]] = None, save_to_file: Optional[bool] = False, filename: Optional[str] = None) -> Tuple[str, str]:
    """
    Function to run a command in the shell.
    
    Parameters:
    cmd (str): The command to be run.
    env (dict): Optional dictionary containing environment variables.
    save_to_file (bool): Optional flag to save the command to a file.
    filename (str): Optional filename to save the command to.

    Returns:
    tuple: The output and error messages (if any) as a tuple.
    """
    # Merge the existing environment variables with the new ones
    env_vars = os.environ.copy()
    if env is not None:
        env_vars.update(env)

    # Use shlex.split to handle command splitting
    cmd_parts = shlex.split(cmd)

    # Run the command
    result = subprocess.run(cmd_parts, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=env_vars)

    # Decode the output and error
    output = result.stdout.decode()
    error = result.stderr.decode()

    # If save_to_file flag is True, save the command to a new Python file
    if save_to_file:
        filename = filename or "command.py"
        with open(filename, 'w') as f:
            f.write(f"import os\n\nos.system('{cmd}')\n")
    
    return output, error

if __name__ == "__main__":
    run_command_tool = run_command()
    command = input("Enter the command you want to run: ")
    output, error = run_command_tool.execute({"cmd": command})

    if output:
        print("Output:\n", output)
    if error:
        print("Error:\n", error)
